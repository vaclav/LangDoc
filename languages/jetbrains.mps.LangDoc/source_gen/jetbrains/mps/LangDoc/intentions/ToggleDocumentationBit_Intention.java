package jetbrains.mps.LangDoc.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.openapi.editor.update.Updater;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class ToggleDocumentationBit_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ToggleDocumentationBit_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:9bed6da3-e5b6-4606-8e7c-969565553d79(jetbrains.mps.LangDoc.intentions)", "6914907434145676658"));
  }
  @Override
  public String getPresentation() {
    return "ToggleDocumentationBit";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromList(SNodeOperations.getNodeAncestors(node, CONCEPTS.DocBit$EQ, true)).isEmpty();
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return ((new IAttributeDescriptor.NodeAttribute(CONCEPTS.DocBit$EQ).get(node) == null) ? "Add a DocBit" : "Remove a DocBit");
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      if ((new IAttributeDescriptor.NodeAttribute(CONCEPTS.DocBit$EQ).get(node) == null)) {
        new IAttributeDescriptor.NodeAttribute(CONCEPTS.DocBit$EQ).setNew(node);
        SNode t = SLinkOperations.setNewChild(new IAttributeDescriptor.NodeAttribute(CONCEPTS.DocBit$EQ).get(node), LINKS.text$HMYG, null);
        SNode l = SLinkOperations.addNewChild(t, LINKS.lines$U$m7, null);
        SLinkOperations.addNewChild(l, LINKS.elements$_j45, CONCEPTS.Word$Dn);
        SelectionUtil.selectLabelCellAnSetCaret(editorContext, new IAttributeDescriptor.NodeAttribute(CONCEPTS.DocBit$EQ).get(node), SelectionManager.FIRST_ERROR_CELL + "|" + SelectionManager.FOCUS_POLICY_CELL + "|" + SelectionManager.FIRST_EDITABLE_CELL + "|" + SelectionManager.FIRST_CELL, 0);

        Updater updater = editorContext.getEditorComponent().getUpdater();
        String[] initialEditorHints = updater.getInitialEditorHints();
        if (initialEditorHints != null) {
          for (String hint : initialEditorHints) {
            if ("jetbrains.mps.LangDoc.editor.DocumentationHints.InlineDocBits".equals(hint)) {
              return;
            }
          }
        }
        editorContext.openInspector();
      } else {
        new IAttributeDescriptor.NodeAttribute(CONCEPTS.DocBit$EQ).set(node, null);
        SelectionUtil.selectLabelCellAnSetCaret(editorContext, node, SelectionManager.FIRST_CELL, 0);

      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return ToggleDocumentationBit_Intention.this;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DocBit$EQ = MetaAdapterFactory.getConcept(0xa23383a395644399L, 0x864372063c6111dcL, 0x5ff6afacb2f5cc77L, "jetbrains.mps.LangDoc.structure.DocBit");
    /*package*/ static final SConcept Word$Dn = MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink text$HMYG = MetaAdapterFactory.getContainmentLink(0xa23383a395644399L, 0x864372063c6111dcL, 0x5ff6afacb2f5cc77L, 0x5ff6afacb2f5cc7eL, "text");
    /*package*/ static final SContainmentLink lines$U$m7 = MetaAdapterFactory.getContainmentLink(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e5619f411L, 0x2331694e561a03b8L, "lines");
    /*package*/ static final SContainmentLink elements$_j45 = MetaAdapterFactory.getContainmentLink(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, 0x2331694e561af167L, "elements");
  }
}

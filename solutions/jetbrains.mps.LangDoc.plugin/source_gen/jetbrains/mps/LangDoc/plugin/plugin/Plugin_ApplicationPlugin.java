package jetbrains.mps.LangDoc.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.applicationplugins.BaseApplicationPlugin;
import com.intellij.openapi.extensions.PluginId;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.actions.View_ActionGroup;
import java.util.List;
import jetbrains.mps.plugins.actions.BaseKeymapChanges;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class Plugin_ApplicationPlugin extends BaseApplicationPlugin {
  private final PluginId myId = PluginId.getId("jetbrains.mps.LangDoc.plugin");

  public Plugin_ApplicationPlugin() {
  }

  @NotNull
  public PluginId getId() {
    return myId;
  }

  public void createGroups() {
    // actions w/o parameters 
    addAction(new HideDocBits_Action());
    addAction(new ShowDocBits_Action());
    // groups 
    addGroup(new DocBitActions_ActionGroup(this));
  }
  public void adjustRegularGroups() {
    insertGroupIntoAnother(DocBitActions_ActionGroup.ID, View_ActionGroup.ID, null);
  }
  public List<BaseKeymapChanges> initKeymaps() {
    List<BaseKeymapChanges> res = ListSequence.fromList(new ArrayList<BaseKeymapChanges>());
    ListSequence.fromList(res).addElement(new DocBitKeys_KeymapChanges());
    ListSequence.fromList(res).addElement(new MacOSX105_KeymapChanges());
    ListSequence.fromList(res).addElement(new MacOSX_KeymapChanges());
    return res;
  }
}
